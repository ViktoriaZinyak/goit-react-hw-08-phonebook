{"version":3,"file":"static/js/938.4dd54906.chunk.js","mappings":"+OAEaA,EAAOC,EAAAA,EAAAA,GAAH,uH,UCAJC,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAIvBC,GAAwBC,EAAAA,EAAAA,IACnC,CAACP,EAHyB,SAAAC,GAAK,OAAIA,EAAMO,OAAOC,KAAjB,IAI/B,SAACP,EAAUQ,GAKT,OAJyBR,EAASM,QAAO,qBAAGG,KACrCC,cAAcC,SAASH,EADW,GAK1C,I,mBCZUI,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClBC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,4BACE,yBACGF,EAAQJ,KADX,MACkB,0BAAOI,EAAQG,aAEjC,mBAAQC,QAPS,kBAAMH,GAASI,EAAAA,EAAAA,IAAcL,EAAQM,IAArC,EAOjB,sBAGL,ECqBD,EA9B2B,WACzB,IAAMnB,GAAWoB,EAAAA,EAAAA,IAAYhB,GAE7B,OACE,yBACGJ,EAASqB,OAAS,GACjB,wBACGrB,EAASsB,KAAI,SAAAT,GAAO,OACnB,SAACjB,EAAD,WACE,SAACgB,EAAD,CAASC,QAASA,KADTA,EAAQM,GADA,OAOvB,2CAIP,ECvBYI,EAAO1B,EAAAA,EAAAA,KAAH,wSC6CjB,EA1C2B,WACzB,IAAMG,GAAWoB,EAAAA,EAAAA,IAAYtB,GACvBgB,GAAWC,EAAAA,EAAAA,MAajB,OACE,UAACQ,EAAD,CAAMC,SAZa,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OACbnB,EAAOkB,EAAKE,SAASpB,KAAKF,MAC1BS,EAASW,EAAKE,SAASb,OAAOT,MACpCP,EAAS8B,MAAK,SAAAjB,GAAO,OAAIA,EAAQJ,OAASA,CAArB,IACjBsB,MAAM,GAAD,OAAItB,EAAJ,4BACLK,GAASkB,EAAAA,EAAAA,IAAW,CAAEvB,KAAAA,EAAMO,OAAAA,KAChCW,EAAKM,OACN,EAGC,WACE,qCAEE,kBACEC,KAAK,OACLzB,KAAK,OACL0B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,uCAEE,kBACEH,KAAK,MACLzB,KAAK,SACL0B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQH,KAAK,SAAb,2BAGL,E,UC3CYI,EAAQzC,EAAAA,EAAAA,MAAH,+DCiBlB,EAfe,WACb,IAAMiB,GAAWC,EAAAA,EAAAA,MAMjB,OACE,8BACE,qDACA,SAACuB,EAAD,CAAOJ,KAAK,OAAOK,SAPN,SAAAC,GACf1B,GAAS2B,EAAAA,EAAAA,GAAUD,EAAEE,cAAcnC,MAAMG,cAAciC,QACxD,MAQF,ECRc,SAASC,IACtB,IAAM9B,GAAWC,EAAAA,EAAAA,MACXZ,GAAYiB,EAAAA,EAAAA,IAAYlB,GAM9B,OAJA2C,EAAAA,EAAAA,YAAU,WACR/B,GAASgC,EAAAA,EAAAA,MACV,GAAE,CAAChC,KAGF,iCACE,SAACiC,EAAA,EAAD,WACE,gDAEF,SAAC,EAAD,KACA,yBAAM5C,GAAa,4BACnB,SAAC,EAAD,KACA,SAAC,EAAD,MAGL,C","sources":["components/ContactList/ContactList.styled.js","redux/contacts/selectors.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  margin-bottom: 10px;\n  p {\n    margin: 0;\n    margin-right: 20px;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.value;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterValue) => {\n    const filteredContacts = contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filterValue)\n    );\n\n    return filteredContacts;\n  }\n);\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <div>\n      <p>\n        {contact.name}: <span>{contact.number}</span>\n      </p>\n      <button onClick={handleDelete}>Delete</button>\n    </div>\n  );\n};\n","// import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { Item } from './ContactList.styled';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { Contact } from '../Contact/Contact';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <div>\n      {contacts.length > 0 ? (\n        <ul>\n          {contacts.map(contact => (\n            <Item key={contact.id}>\n              <Contact contact={contact} />\n            </Item>\n          ))}\n        </ul>\n      ) : (\n        <div>No contacts </div>\n      )}\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 10px 15px;\n  border: 1px solid grey;\n  label {\n    margin-bottom: 15px;\n  }\n  input {\n    display: block;\n    margin-top: 5px;\n  }\n  button {\n    margin-top: 15px;\n    width: 130px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Form } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n    contacts.find(contact => contact.name === name)\n      ? alert(`${name} is already in contacts`)\n      : dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        ></input>\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  display: block;\n  margin-top: 5px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { Input } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    dispatch(setFilter(e.currentTarget.value.toLowerCase().trim()));\n  };\n\n  return (\n    <label>\n      <span>Find contacts by name</span>\n      <Input type=\"text\" onChange={onChange}></Input>\n    </label>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactList from 'components/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["Item","styled","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filter","value","filterValue","name","toLowerCase","includes","Contact","contact","dispatch","useDispatch","number","onClick","deleteContact","id","useSelector","length","map","Form","onSubmit","event","preventDefault","form","target","elements","find","alert","addContact","reset","type","pattern","title","required","Input","onChange","e","setFilter","currentTarget","trim","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}